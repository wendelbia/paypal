Crio a model
*criar model Balance e Hitoric, se eu passar -m já cria a migrations: 
php artisan make: model Balance -m
Sempre cria a tabela com o nome no plural
=======================================================
Criar tabelas 
Em config/database.php vou em 'mysql' => [] em charset e collation o 'utf8mb4' tem limitações para campos unique() ele permite 140 caracteres e seria preciso fazer para todos os outros campos, para q não seja necessário vamos em Providers/AppServicePovider.php em public function boot() e modificamos.
Configuro dados de conecção do banco de dados: config/database e verificamos se está tudo certo.
e php artisan migrate
========================================================
Passo a Passo

1º - para laravel 5.6:
composer require jeroennoten/laravel-adminlte=~1.27.2

2º - php artisan vendor:publish --provider="JeroenNoten\LaravelAdminLte\ServiceProvider" --tag=assets

3º - php artisan make:adminlte



4º - php artisan vendor:publish --provider="JeroenNoten\LaravelAdminLte\ServiceProvider" --tag=config

5º - php artisan vendor:publish --provider="JeroenNoten\LaravelAdminLte\AdminLteServiceProvider" --tag=views

========================================================
#08 Layout AdminLTE:
https://github.com/jeroennoten/Laravel-AdminLTE
Comando para instalar com ~1.0 pq é compatível com o 5.6:composer require jeroennoten/laravel-adminlte=1.0
Publish the public assets:
php artisan vendor:publish --provider="JeroenNoten\LaravelAdminLte\ServiceProvider" --tag=assets
===========================================================
#09 Vamos usar o seeder em database/seeders
comando para criar a seeder: php artisan make:seed UsersTableSeeder
comando para rodar a seeder: php artisan db:seed
===========================================================
#10 Aquivos q serão gerados para o admimLte:
php artisan make:adminlte
Para configurar o admminlte: 
php artisan vendor:publish --provider="JeroenNoten\LaravelAdminLte\ServiceProvider" --tag=config
ícones: fontawesome.io/icons/
==========================================================
#12 Organização 
dentro de view criar uma pasta site e também admin/home/index.blade.php e crio a rota em web.php e crio o controller

crio Admin/AdminController
=========================================================
#13 Redirecionamento
mudamos em Controller/Auth/LoginController.php e em $redirectTo = '/admin' em RegisterController também e em:
Middleware/RedirectiAuthenticated.php 
=========================================================
#14 Tradução
Traduções: C:\laragon\www\systemsaldo\resources\lang
λ git clone https://github.com/UpInside/laravel-pt-BR.git ./pt-BR
Costumizar:
php artisan vendor:publish --provi der="JeroenNoten\LaravelAdminLte\ServiceProvider" --tag="views"
Editar se quiser em: resources/views/vendor/adminlte
==========================================================
#15 Customizar views template adminLTE
https://github.com/jeroennoten/Laravel-AdminLTE#7-customize-views 
Vou em customize view e: 
λ php artisan vendor:publish --provider="JeroenNoten\LaravelAdminLte\ServiceProvider" --tag="views"
=============================================================
#16 Layout Exibição do saldo
Fazer um novo menu abaixo do Home no dashboard:
config/adminlte.php em 'menu' => [] e submenus
Crio: AdminBalanceController.php, crio a view index, e a rota e copio o templante do Site Oficial Admin LTE: https://adminlte.io
==============================================================
#17 exibir saldo do usu
==============================================================
#18 Preparar formulário de recarga
==============================================================
#19 - Preparar Para Fazer Recarga Saldo do Usuário no Laravel
==============================================================
#20 - FAZER RECARGA E EXIBIR RETORNOS
==============================================================
#21 - Registrar Históricos de Recargas no Laravel
==============================================================
#22 - BEGINTRANSACTION
==============================================================
#23 - VALIDAÇÃO DE ENTRADA DE SALDO
==============================================================
#24 - MELHORAR EXIBIÇÃO DE MENSAGENS
==============================================================
#25 - PREPARAR FAZER SAQUE
==============================================================
#26 - FAZER SAQUE E REGISTRAR HISTÓRICO
==============================================================
#27 - PREPARAR PARA FAZER TRANSFERÊNCIA DE SALDO
==============================================================
#28 - CONFIRMAÇÃO DE TRANSFERÊNCIA SALDO
==============================================================
#29 - TRANSFERIR SALDO DE UMA CONTA PARA OUTRA
==============================================================
#30 - EXIBIR HISTÓRICO FINANCEIRO DO USUÁRIO
==============================================================
#31 - MELHORIAS NA EXIBIÇÃO DO HISTÓRICO
==============================================================
#32 - PAGINAR HISTÓRICOS DE MOVIMENTAÇÕES
==============================================================
#33 - PREPARAR PARA FILTRAR HISTÓRICOS
==============================================================
#34 - FILTRAR REGISTROS 
==============================================================
#35 - FILTRO COM PAGINAÇÃO
==============================================================
#36 - FILTRAR PELO USUÁRIO LOGADO LARAVEL SCOPE
==============================================================
#37 - PREPARAR PÁGINA DE EXIBIÇÃO DO PERFIL
==============================================================
#38 - CRIAR TEMPLATE DO SITE
==============================================================
#39 - EDITAR PERFIL USUÁRIO
==============================================================
#40 - UPLOAD IMAGEM PERFIL USUÁRIO
==============================================================
#41 - EXIBIR IMAGEM DE PERFIL DO USUÁRIO
==============================================================
#42 - VALIDAR EDIÇÃO DE PERFIL DO USUÁRIO
==============================================================
Para subir o projeto no github
Entre no seu projeto

git add . para adicionar arquivos

git commit -m "Mensagem", sendo que m é uma mensagem 

git push ou git push --set-upstream origin master


meu git:  
https://github.com/wendelbia/laravel
senha: 1BIAbiabia
senha no terminal: fdsaasdf

Funções de versionadores de código para as várias versões de um software:
.Organizar
.Distribuir
.Gerenciar
Tanto para pequenos ou grandes projetos

Criado por Linus Turvan criador de Kenel
Como funcional:
Temos um servidor local ou remoto, e precisamos fazer um clone de um projeto ou o meu próprio em minha máquina e começo a desenvolver melhorias, mudanças e junto tudo em um pacote dentro de um commit e então envio para um repositório remoto com um push, ao alterar um repositório q foi usado por outro programador para que eu possa atualizar o código depois de ter envidado tudo isso para o repositório eu faço um pull em vez de clonar, então:
======================================================================
git clone: para baixar o projeto a primeira vez na sua máquina.

git add . : para adicionar os arquivos nos commits

git commit -m "mensagem": para formalizar as mudanças

git push: para subir as alterações no github

git pull: para receber o código atualizado



então vário programadores que fazem pedidos de melhorias ao repositório através de uma operação que se chama merge

Git não é a mesma coisa que GitHub

Git é um programa que versiona códigos
GitHub é um servidor na nuvem que armazena seus códigos e possui uma interface amigável. Assim como o GitHub temos outros serviços tão bons quanto, como o GitLab e BitBucket

Entre no seu projeto

git add . para adicionar arquivos

git commit -m "Mensagem", sendo que m é uma mensagem 

git push ou git push --set-upstream origin master

Os arquivos ainda estaram na máquina para q os programadores tenham acesso mesmo privado é necessário o comando git push

Para trabalhar em equipe se faz necessário o pull rerquest:
Nada mais é q um pedido de incorporação do seu código na árvore de códigos

Dentro do Git podemos ter vários ramos (branch em inglês), onde o ramo principal e padrão é o master

Raramente em um projeto com vários programadores fazemos os commits e pushs diretamente no branch master

Todas essas alterações são feitas por pull request  por um responsável técnico que analisa seu código para fazer um merge dentro do master

É enviado o código, alguns progamadores analisam seu código (code review) e fazem alguns comentários caso necessite de melhorias. Depois de corrigido e ajustado é incorporado no branch master do projeto. 

Pode-se reparar que estamos trabalhando no branch master do projeto, o correto é criar um branch específico através do comando (git checkout -b nome-da-banch) por exemplo:
 git checkout -b alterar-de-cor
 em que será adicionado uma nome a uma branch, o nome da branch tem a ver com a finalidade.

 Feita a alteração eu repito o processo passado anteriormente:


git add .

git commit -m "alteração de cor fundo da tela"

aparece a mensagem com a alteração feita, logo depois subo essa alteração com o comando:

git push

O único passo diferente do anterior que se faz é abrir o GitHub para que possamos criar o Pull Request. Este Pull Request irá descrever as mudanças e deixar uma área para discussão. Vou no brand e crio PR(pull request)

Antes de desenvolver qualquer alteração no seu projeto, é importante que baixe as atualizações feitas pela equipe ou por vc mesmo em outro momento. Para isso basta digitar o comando "git pull" no terminal. 

Gerenciando os conflitos de código:
Com este processo de baixar é normal que ocorram conflitos de código, esse conflitos são áreas de código onde 1 ou mais programadores alteram e que agora precisam ser revisadas. Normalmente o Git consegui resolver a grande maioria, e os que não consegue ele marca o código como um bloco visual.

Ao abrir o código estará marcado >>>> qual os conflitos e poderá decidir o que fica e o que não fica e para ajustar é necessário realizar o git add . e o git commit -m "resolvendo conflito" e realizar o git push e subir para o repositório remoto

Como colaborar com outros porjetos remotos ou trabalhar em equipe:

A maioria dos projetos open source possuem um arquivo chamado CONTRIBUTING.md, onde se encotram as regras de contribuição e também as principais necessidades do projeto. Caso vc não ache é sempre bom buscar por um mantenedor do projeto e perguntar antes de sair fazendo qualquer coisa. Não desperdice energia

1 criar o código e subir no GitHub
2 documentar em uma espécie de "diário de bordo"

No README primeira parte da documentação será uma explicação ilustrada com telas, será explicado com uma linguagem não muito técnica o que o projeto se propõe a fazer

Para utilizar esse projeto, por favor, acesse: www.meunome......

O que é o projeto:

Principais funcionalidade

Faça um diário de bordo com por exemplo

diário de bordo 

Dia 1 - 08/10/2020
Neste dia eu fiz:

.x
.y
.z

A minha principal dificuldade foi...

Dia 2 - 09/12/2020

Hoje foi mais complicado porque...
































